/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.22-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.rak.bookstore.controller;


import com.rak.bookstore.exception.NotFoundException;
import com.rak.bookstore.payload.BookInfo;
import com.rak.bookstore.payload.BookPatch;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-08-05T17:34:30.092+04:00")

@Validated
@Api(value = "books", description = "the books API")
@RequestMapping(value = "/bookstore/1.0.0")
public interface BooksApi {

    @ApiOperation(value = "find all books", nickname = "booksGet", notes = "", response = BookInfo.class, responseContainer = "List", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Read successfully", response = BookInfo.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Failed due to bad input") })
    @RequestMapping(value = "/books",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<BookInfo>> booksGet();


    @ApiOperation(value = "Delete a book", nickname = "booksIdDelete", notes = "", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete the book successfully"),
        @ApiResponse(code = 404, message = "Unable to find book with the given id") })
    @RequestMapping(value = "/books/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> booksIdDelete(@ApiParam(value = "book id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get book details using id", nickname = "booksIdGet", notes = "", response = BookInfo.class, responseContainer = "List", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BookInfo.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No books found with the given id") })
    @RequestMapping(value = "/books/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity <BookInfo> booksIdGet(@ApiParam(value = "book id",required=true) @PathVariable("id") Long id) throws NotFoundException;


    @ApiOperation(value = "Update author/classification/price of a book", nickname = "booksIdPatch", notes = "", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Updated Successfully"),
        @ApiResponse(code = 400, message = "Updated failed due to bad input"),
        @ApiResponse(code = 404, message = "Unable to find book with the given id") })
    @RequestMapping(value = "/books/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> booksIdPatch(@ApiParam(value = "book id",required=true) @PathVariable("id") Long id,@ApiParam(value = "Create new book" ,required=true )  @Valid BookPatch body) throws NotFoundException;


    @ApiOperation(value = "Update a book", nickname = "booksIdPut", notes = "", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Updated Successfully"),
        @ApiResponse(code = 400, message = "Updated failed due to bad input"),
        @ApiResponse(code = 404, message = "Unable to find book with the given id") })
    @RequestMapping(value = "/books/{id}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> booksIdPut(@ApiParam(value = "book id",required=true) @PathVariable("id") Long id,@ApiParam(value = "Create new book" ,required=true )  @Valid @RequestBody BookInfo body);


    @ApiOperation(value = "Create a new book", nickname = "booksPost", notes = "", tags={ "Book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created a book"),
        @ApiResponse(code = 400, message = "Failed due to bad input") })
    @RequestMapping(value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<BookInfo> booksPost(@ApiParam(value = "Create new book" ,required=true )  @Valid @RequestBody BookInfo body);

}
